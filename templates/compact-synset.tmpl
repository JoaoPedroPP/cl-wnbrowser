/** -*- mode: html -*- */

{namespace cl-wnbrowser.Templates}

{template compact-synset}

<div class="synsetprops">

  <h1>{$gloss_en}</h1>
  <b><a href="synset?id={$doc_id}">{$doc_id}</a></b>
  [gloss pt: 
  {foreach $g in $gloss_pt}
  {if not isFirst($g)}{sp}&bull;{sp}{/if}
  {$g}{ifempty}n/a
  {/foreach}]

<p>
  [<b>words en</b>: {foreach $w in $word_en}
  {if not isFirst($w)}{sp}&bull;{sp}{/if}
  {$w}
  {/foreach}]
  
  [<b>words pt</b>: {foreach $w in $word_pt}
  {if not isFirst($w)}{sp}&bull;{sp}{/if}
  {$w}
  {ifempty}n/a
  {/foreach}]
</p>

<ul>
<li>{$wn30_lexicographerfile}/{$rdf_type}</li>

    {call describe-relation}
      {param description: 'Classified by usage' /}
      {param synsets: $wn30_classifiedbyusageexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Hypernym of' /}
      {param synsets: $wn30_hypernymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Hyponym of' /}
      {param synsets: $wn30_hyponymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Part holonym of' /}
      {param synsets: $wn30_partholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Part meronym of' /}
      {param synsets: $wn30_partmeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Member holonym of' /}
      {param synsets: $wn30_memberholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Member meronym of' /}
      {param synsets: $wn30_membermeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Substance holonym of' /}
      {param synsets: $wn30_substanceholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Substance meronym of' /}
      {param synsets: $wn30_substancemeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Similar to' /}
      {param synsets: $wn30_similartoexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'See also' /}
      {param synsets: $wn30_seealsoexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Instance of' /}
      {param synsets: $wn30_instanceofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Has instance' /}
      {param synsets: $wn30_hasinstanceexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Attribute' /}
      {param synsets: $wn30_attributeexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Causes' /}
      {param synsets: $wn30_causesexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Same verb group as' /}
      {param synsets: $wn30_sameverbgroupasexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Entails' /}
      {param synsets: $wn30_entailsexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by region' /}
      {param synsets: $wn30_classifiedbyregionexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by topic' /}
      {param synsets: $wn30_classifiedbytopicexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by usage' /}
      {param synsets: $wn30_classifiedbyusageexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by region' /}
      {param synsets: $wn30_classifiesbyregionexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by topic' /}
      {param synsets: $wn30_classifiesbytopicexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by usage' /}
      {param synsets: $wn30_classifiesbyusageexpanded /}
    {/call}

  </ul>

  {if isNonnull($suggestions)}
  <a href="#suggestions"></a>
  <table class="suggestions">
    <tr><th>Votes</th><th>Action</th><th>Content</th><th>User (prov.)</th><th>Age</th></tr>
    {foreach $s in $suggestions}
    {if isNonnull($login)}
    <script>
    registerVote('{getdocid($s)}', '{getvoteid($login, $s.votes.positive_votes)}', '{getvoteid($login, $s.votes.negative_votes)}');
    </script>
    {/if}

    <tr>
      <td>
       {if isNonnull($login) and isauthorizedvote($login) and ($s.status == 'new')}
        <div class="midcol">

          <div id="vote-up-{getdocid($s)}" role="button" class="arrow {if alreadyvoted($login, $s.votes.positive_votes)}upmod{else}up{/if}" onclick="voteup('{getdocid($s)}')"></div>
          
          <div id="vote-down-{getdocid($s)}" role="button" class="arrow {if alreadyvoted($login, $s.votes.negative_votes)}downmod{else}down{/if}" onclick="votedown('{getdocid($s)}')"></div>
          
        </div>
        {/if}
        
        <div class="votes"><b><a href="javascript://" onclick="toggle_visibility('vote-details-{getdocid($s)}')"><span id="total-{getdocid($s)}">{$s.votes.total}</span></a></b> (<span id="positive-{getdocid($s)}">{$s.votes.positive}</span>/<span id="negative-{getdocid($s)}">{$s.votes.negative}</span>)</div>
      </td>
      <td><tt>{niceaction($s.action)}</tt></td><td>{$s.params}</td><td>{$s.user} ({$s.provenance})</td>
      <td>{prettydate($s.date)}</td>
    </tr>
    {/foreach}
  </table>
  {/if}

</div>

{/template}
