/** -*- mode: html -*- */

{namespace cl-wnbrowser.Templates}

{template synset-ref}

     {if isarray($synsets)}
     {foreach $s in $synsets}
       {if not isFirst($s)}, {/if}
       <a href="synset?id={$s.id}">{$s.name}</a>
     {/foreach}
     {/if}  

{/template}

{template describe-relation}

     {if isNonnull($synsets)}
         <li>{$description}: 
         [ {call synset-ref}{param synsets: $synsets /}{/call} ]
         </li>
     {/if}

{/template}


{template synset}
{call header}
   {param extratitle: $id /}
   {param term: $term /}
{/call}

<div class="synsetprops">

  {if isNonnull($ids)}
  <div class="breadcrumb">
    <ul class="breadcrumb">
      {foreach $id in $ids}
      <li class="breadcrumb"><a href="synset?id={$id}">{synsetworden($id)}</a></li>
      {/foreach}
    </ul>
  </div>
  {/if}
  
  <h2>{$id}</h2>

  <h3>English</h3>

  <p><i>{$gloss_en}</i></p>

  <p>
    {foreach $w in $word_en}
    {if not isFirst($w)}{sp}&bull;{sp}{/if}
    <span class="enword">{$w}</span>
    {/foreach}
  </p>

  <h3>Portuguese</h3>

  <script type="text/javascript">
    var del_words = [];
    var add_words = [];
    var add_gloss = [];
    var del_gloss = [];
    var add_ex = [];
    var del_ex = [];
    
  {if isNonnull($suggestions)}
    {foreach $s in $suggestions}
    {if $s.action == 'add-word-pt'}
    add_words.push('{$s.params}'.trim());
    {/if}
    {if $s.action == 'remove-word-pt'}
    del_words.push('{$s.params}'.trim());
    {/if}
    {if $s.action == 'add-example-pt'}
    add_ex.push('{$s.params}'.trim());
    {/if}
    {if $s.action == 'remove-example-pt'}
    del_ex.push('{$s.params}'.trim());
    {/if}
    {if $s.action == 'add-gloss-pt'}
    add_gloss.push('{$s.params}'.trim());
    {/if}
    {if $s.action == 'remove-gloss-pt'}
    del_gloss.push('{$s.params}'.trim());
    {/if}
    {/foreach}
  {/if}
  </script>
  
  {literal}
  <script>
    function validate(form, words)
    {
      var v = form.elements["params"].value.trim();
    
      if (words.indexOf(v) >= 0)
      {
        alert("Suggestion already made.");
        return false;
      }

      if (v.length < 1)
      {
        alert("Invalid suggestion.");
        return false;
      }
                     
      return true;
    }
  </script>
  {/literal}
  
  <p>
    Gloss: <i>
      {if isNonnull($gloss_pt)}
      {foreach $g in $gloss_pt}
      {if not isFirst($g)}{sp}&bull;{sp}{/if}
      {if insuggestions($g, $suggestions, 'remove-gloss-pt')}<strike>{/if}{$g}{if insuggestions($g, $suggestions, 'remove-gloss-pt')}</strike>{/if}
      
      {if isNonnull($login) and notinsuggestions($g, $suggestions, 'remove-gloss-pt')}
      [<a title="Suggest removing this gloss" href="/wn/process-suggestion?id={$id}&doc_type=synset&type=remove-gloss-pt&params={$g}&return-uri={urlencode($returnuri)}">x</a>]
      {/if}
      {/foreach}
      {else}
      empty gloss
      {/if}
    </i>

    {if isNonnull($login)}
    <form action="/wn/process-suggestion" onsubmit="return validate(this, add_gloss)">
      <input type="hidden" name="type" value="add-gloss-pt">
      <input type="hidden" name="return-uri" value="{urlencode($returnuri)}">
      <input type="hidden" name="id" value="{$id}">
      <input type="hidden" name="doc_type" value="synset">
      <input type="text" name="params">
      <input type="submit" value="Suggest new gloss">
    </form>
    {/if}

  </p>

  <p>
    Ex.: <i>
      {if isNonnull($example_pt)}
      {foreach $e in $example_pt}
      {if not isFirst($e)}{sp}&bull;{sp}{/if}
      {if insuggestions($e, $suggestions, 'remove-example-pt')}<strike>{/if}{$e}{if insuggestions($e, $suggestions, 'remove-example-pt')}</strike>{/if}

      {if isNonnull($login) and notinsuggestions($e, $suggestions, 'remove-example-pt')}
      [<a title="Suggest removing this example" href="/wn/process-suggestion?id={$id}&doc_type=synset&type=remove-example-pt&params={$e}&return-uri={urlencode($returnuri)}">x</a>]
      {/if}
      {/foreach}
      {else}
      empty example
      {/if}
    </i>

    {if isNonnull($login)}
    <form action="/wn/process-suggestion" onsubmit="return validate(this, add_ex)">
      <input type="hidden" name="type" value="add-example-pt">
      <input type="hidden" name="return-uri" value="{urlencode($returnuri)}">
      <input type="hidden" name="id" value="{$id}">
      <input type="hidden" name="doc_type" value="synset">
      <input type="text" name="params">
      <input type="submit" value="Suggest new example">
    </form>
    {/if}

  </p>


  <p>
    {foreach $w in $word_pt}
    {if not isFirst($w)}{sp}&bull;{sp}{/if}
    <span class="ptbrword">
      {if insuggestions($w, $suggestions, 'remove-word-pt')}<strike>{/if}{$w}{if insuggestions($w, $suggestions, 'remove-word-pt')}</strike>{/if}

      {if isNonnull($login) and notinsuggestions($w, $suggestions, 'remove-word-pt')}
      [<a title="Suggest removing this word" href="/wn/process-suggestion?id={$id}&doc_type=synset&type=remove-word-pt&params={$w}&return-uri={urlencode($returnuri)}">x</a>]
      {/if}
    </span>
    {ifempty}<i>[ empty word list ]</i>
    {/foreach}

    {if isNonnull($login)}
    <form action="/wn/process-suggestion" onsubmit="return validate(this, add_words)">
      <input type="hidden" name="return-uri" value="{urlencode($returnuri)}">
      <input type="hidden" name="type" value="add-word-pt">
      <input type="hidden" name="id" value="{$id}">
      <input type="hidden" name="doc_type" value="synset">
      <input type="text" name="params">
      <input type="submit" value="Suggest new word">
    </form>
    {/if}
  </p>

  <h3>Relations</h3>

  <ul>
    <li>Lexicographer file: {$wn30_lexicographerfile}</li>

    {if isNonnull($wn30_frame)}
    <li>Frame: {$wn30_frame}</li>
    {/if}

    <li>RDF Type: {$rdf_type}</li>

    {if isNonnull($relatednomlexes)}
    <li>Nomlexes: 
      {foreach $nl in $relatednomlexes}
      {if not isFirst($nl)}, {/if}
      <a href="nomlex?id={$nl}">{$nl}</a>
      {/foreach}
    </li>
    {/if}

    <!-- some sample relations -->

    {call describe-relation}
      {param description: 'Classified by usage' /}
      {param synsets: $wn30_classifiedbyusageexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Hypernym of' /}
      {param synsets: $wn30_hypernymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Hyponym of' /}
      {param synsets: $wn30_hyponymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Part holonym of' /}
      {param synsets: $wn30_partholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Part meronym of' /}
      {param synsets: $wn30_partmeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Member holonym of' /}
      {param synsets: $wn30_memberholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Member meronym of' /}
      {param synsets: $wn30_membermeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Substance holonym of' /}
      {param synsets: $wn30_substanceholonymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Substance meronym of' /}
      {param synsets: $wn30_substancemeronymofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Similar to' /}
      {param synsets: $wn30_similartoexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'See also' /}
      {param synsets: $wn30_seealsoexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Instance of' /}
      {param synsets: $wn30_instanceofexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Has instance' /}
      {param synsets: $wn30_hasinstanceexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Attribute' /}
      {param synsets: $wn30_attributeexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Causes' /}
      {param synsets: $wn30_causesexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Same verb group as' /}
      {param synsets: $wn30_sameverbgroupasexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Entails' /}
      {param synsets: $wn30_entailsexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by region' /}
      {param synsets: $wn30_classifiedbyregionexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by topic' /}
      {param synsets: $wn30_classifiedbytopicexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classified by usage' /}
      {param synsets: $wn30_classifiedbyusageexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by region' /}
      {param synsets: $wn30_classifiesbyregionexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by topic' /}
      {param synsets: $wn30_classifiesbytopicexpanded /}
    {/call}

    {call describe-relation}
      {param description: 'Classifies by usage' /}
      {param synsets: $wn30_classifiesbyusageexpanded /}
    {/call}

  </ul>

  <h3>External resources</h3>
  <ul>
    <li><a href="http://compling.hss.ntu.edu.sg/omw/cgi-bin/wn-gridx.cgi?synset={$id}" target="_blank">OMW</a>
    </li>
    <li><a href="http://sigma-01.cim3.net:8080/sigma/WordNet.jsp?synset={synsetidtosumo($id)}&kb=SUMO&flang=SUO-KIF&lang=EnglishLanguage&kb=SUMO">SUMO</a></li>
  </ul>

  {if isNonnull($debug)}
  <hr/>
  <p><tt>{$synset}</tt></p>
  {/if}

  {literal}
  <script src="//code.jquery.com/jquery-2.1.3.min.js"></script>
  <script type="text/javascript">
    <!--
      var pending = false;

      window.addEventListener("beforeunload", 
        function (e)
        {
          if (pending)
          {
            var confirmationMessage = 'There are still changes being sent to the server.  If you leave now, your changes will be lost.';

            (e || window.event).returnValue = confirmationMessage; //Gecko + IE
            return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.
          }
        });

        var votes = {};

        function registerVote(suggestion_id, pvote_id, nvote_id)
        {
          var vote_id = null;
          if (pvote_id) vote_id = pvote_id;
          if (nvote_id) vote_id = nvote_id;
          votes[suggestion_id] = vote_id;
        }

        function getVote(suggestion_id)
        {
          return votes[suggestion_id];
        }

        function update(suggestion_id, pos, neg)
        {
          if (suggestion_id)
          {
            var pos_elt = $('#positive-' + suggestion_id);

            pos_value = parseInt(pos_elt.text(), 10);
            pos_value += pos;

            var neg_elt = $('#negative-' + suggestion_id);

            neg_value = parseInt(neg_elt.text(), 10);
            neg_value += neg;

            var total_elt = $('#total-' + suggestion_id);

            pos_elt.text(pos_value);
            neg_elt.text(neg_value);
            total_elt.text(pos_value + neg_value);
          }
        }
        
        function isPressed(btn)
        {
          return btn.hasClass('upmod') || btn.hasClass('downmod');
        }

        function dePress(btn)
        {
          if (btn.hasClass('upmod'))
          {
            btn.removeClass('upmod');
            btn.addClass('up');
          } else
          {
            if (btn.hasClass('downmod'))
            {
              btn.removeClass('downmod');
              btn.addClass('down');
            }
          }
        }

        function press(btn)
        {
          if (btn.hasClass('up'))
          {
            btn.removeClass('up');
            btn.addClass('upmod');
          } else
          {
            if (btn.hasClass('down'))
            {
              btn.removeClass('down');
              btn.addClass('downmod');
            }
          }
        }

        function callVoteUp(suggestion_id, callback)
        {
          if (suggestion_id)
          {
            pending = true;
            $.ajax({ 
              url: 'vote-up',
              data: { id: suggestion_id },
              dataType: "json",
              complete:
                function(jqXHR, status)
                {
                  pending = false;
                },
              success:
                function(data, status, jqXHR)
                {
                  registerVote(suggestion_id, data.id, null);
                }
            });
          }
        }

        function callVoteDown(suggestion_id, callback)
        {
          if (suggestion_id)
          {
            pending = true;
            $.ajax({ 
              url: 'vote-down',
              data: { id: suggestion_id },
              dataType: "json",
              complete:
                function(jqXHR, status)
                {
                  pending = false;
                },
              success:
                function(data, status, jqXHR)
                {
                  registerVote(suggestion_id, null, data.id);
                }
            });
          }
        }

        function callDeleteVote(vote_id, callback)
        {
          if (vote_id) 
          {
            pending = true;
            $.ajax({ 
              url: 'delete-vote',
              data: { id: vote_id },
              dataType: "json",
              complete:
                function(jqXHR, status)
                {
                  pending = false;
                },
              success:
                function(data, status)
                {
                  if (callback) callback(data, status); 
                }
            });
          }
        }

        function voteup(suggestion_id)
        {
          if (pending)
            return;

          $('#warning').css('display', 'block');

          var button_up = $('#vote-up-'+suggestion_id);
          var button_down = $('#vote-down-'+suggestion_id);

          var vote_id = getVote(suggestion_id);

          // up was already pressed: need to delete the vote
          if (isPressed(button_up))
          {
            dePress(button_up);
            update(suggestion_id, -1, 0);
            callDeleteVote(vote_id);
          }
          else
          {
            // down was already pressed: need to delete that vote and add this new one
            if (isPressed(button_down))
            {
              dePress(button_down);
              update(suggestion_id, 0, 1);
              press(button_up);
              update(suggestion_id, 1, 0);

              callDeleteVote(
                vote_id,
                function(data,status)
                {
                  callVoteUp(suggestion_id);
                });
            }
            else 
            {
              press(button_up);
              update(suggestion_id, 1, 0);
              callVoteUp(suggestion_id);
            }
          }
        }

        function votedown(suggestion_id)
        {
          if (pending)
            return;

          $('#warning').css('display', 'block');

          var button_up = $('#vote-up-'+suggestion_id);
          var button_down = $('#vote-down-'+suggestion_id);

          var vote_id = getVote(suggestion_id);

          if (isPressed(button_down))
          {
            dePress(button_down);
            update(suggestion_id, 0, 1);
            callDeleteVote(vote_id);
          }
          else
          {
            if (isPressed(button_up))
            {
              dePress(button_up);
              update(suggestion_id, -1, 0);
              press(button_down);
              update(suggestion_id, 0, -1);
              callDeleteVote(
                vote_id,
                function(data,status)
                {
                  callVoteDown(suggestion_id);
                });
            }
            else
            {
              press(button_down);
              update(suggestion_id, 0, -1);
              callVoteDown(suggestion_id);
            }
          }
        }

        function toggle_visibility(id) 
        {
          var e = document.getElementById(id);

          if(e.style.display == 'block')
            e.style.display = 'none';
          else
            e.style.display = 'block';
        }
    //-->
  </script>
  {/literal}
  
  {if isNonnull($suggestions)}
  <h3>Suggestions</h3>
  <a href="#suggestions"></a>
  <table class="suggestions">
    <tr><th>Votes</th><th>Action</th><th>Content</th><th>User (prov.)</th><th>Status</th><th>Action</th></tr>
    
    {foreach $s in $suggestions}
    {if isNonnull($login)}
    <script>
    registerVote('{getdocid($s)}', '{getvoteid($login, $s.votes.positive_votes)}', '{getvoteid($login, $s.votes.negative_votes)}');
    </script>
    {/if}
    <tr>
      <td>
        {if isNonnull($login) and isauthorizedvote($login)}
        <div class="midcol">
          
          <div id="vote-up-{getdocid($s)}" role="button" class="arrow {if alreadyvoted($login, $s.votes.positive_votes)}upmod{else}up{/if}" onclick="voteup('{getdocid($s)}')"></div>
          
          <div id="vote-down-{getdocid($s)}" role="button" class="arrow {if alreadyvoted($login, $s.votes.negative_votes)}downmod{else}down{/if}" onclick="votedown('{getdocid($s)}')"></div>
          
        </div>
        {/if}
        
        <div class="votes"><b><a href="javascript://" onclick="toggle_visibility('vote-details-{getdocid($s)}')"><span id="total-{getdocid($s)}">{$s.votes.total}</span></a></b> (<span id="positive-{getdocid($s)}">{$s.votes.positive}</span>/<span id="negative-{getdocid($s)}">{$s.votes.negative}</span>)</div>

        <div id="vote-details-{getdocid($s)}" style="display: none">
        {if (isNonnull($s.votes.positive_votes) or isNonnull($s.votes.negative_votes))}
        <ul>
          <li id="warning" style="display: none"><i>Refresh the page for the updated list</i></li>
          {if isNonnull($s.votes.positive_votes)}
          <li>
            <b>Agree:</b>
            {foreach $u in $s.votes.positive_votes}
            {if not isFirst($u)}, {/if}
            {$u.user}
            {/foreach}
          </li>
          {/if}

          {if isNonnull($s.votes.negative_votes)}
          <li>
            <b>Disagree:</b>
            {foreach $u in $s.votes.negative_votes}
            {if not isFirst($u)}, {/if}
            {$u.user}
            {/foreach}
          </li>
          {/if}

        </ul>
        {/if}
        </div>
      </td>
      <td><tt>{$s.action}</tt></td><td>{$s.params}</td><td>{$s.user} ({$s.provenance})</td><td>{$s.status}</td>
      <td>
        {if validstatus($s.status) and (isself($login, $s.user) or isauthorizedapprove($login))}
        <a href="/wn/delete-suggestion?id={getdocid($s)}&return-uri={urlencode($returnuri)}" title="Delete suggestion">del</a>
	{else}
	del
	{/if}
	{if validstatus($s.status) and isauthorizedapprove($login)} |
        <a href="/wn/accept-suggestion?id={getdocid($s)}&return-uri={urlencode($returnuri)}" title="Accept suggestion">acc</a> |
        <a href="/wn/reject-suggestion?id={getdocid($s)}&return-uri={urlencode($returnuri)}" title="Reject suggestion">rej</a>
        {else}
        | acc | rej
        {/if}
      </td>
    </tr>
    {/foreach}
  </table>
  {/if}

  {if isNonnull($comments) or isNonnull($login)}
  <h3>Comments</h3>
  
  {foreach $c in $comments}
  <p><b>{$c.user}</b>: {$c.params} ({prettydate($c.date)})
    {if isself($login, $c.user) or isauthorizedapprove($login)}
    [<a href="/wn/delete-comment?id={getdocid($c)}&return-uri={urlencode($returnuri)}">del</a>]
    {/if}
  </p>
  {/foreach}
  
    {if isNonnull($login)}
    <form action="/wn/process-comment">
      <input type="hidden" name="id" value="{$id}">
      <input type="hidden" name="return-uri" value="{urlencode($returnuri)}">
      <input type="hidden" name="doc_type" value="synset">
      <textarea rows="4" cols="80" name="text"></textarea>
      <br>
      <input type="submit" value="Add comment">
    </form>
    {/if}

  {/if}
  

</div>

<hr>

    <p>[ <a href="https://github.com/arademaker/openWordnet-PT/wiki">Doc</a> | <a href="search-activities">Activity</a> | <a href="stats">Stats</a> | <a href="https://github.com/fcbr/cl-wnbrowser" target="_blank">Source</a> |

      {if isNonnull($login)}
      <b>{$login}</b>
      {else}
      <a href="https://github.com/login/oauth/authorize?client_id={$githubid}">Login</a>
      {/if}
      ]</p>

{call footer /}
{/template}
